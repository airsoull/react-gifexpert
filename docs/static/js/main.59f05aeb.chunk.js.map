{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","placeholderText","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","defaultProps","getGifs","search","a","url","encodeURI","fetch","respuesta","json","data","map","img","id","title","images","downsized_medium","useFetchGifs","category","loading","state","setstate","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","image","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGMA,EAAc,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAAsB,EAEtBC,mBAAS,IAFa,mBAEnDC,EAFmD,KAEvCC,EAFuC,KAc1D,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAdoB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,QAelDG,YAAad,MAWrBF,EAAYiB,aAAe,CACzBf,gBAAiB,kBAGJF,Q,uBCvBAkB,EAfF,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,4DACC,mCACTC,EAFQ,uDACC,mCADD,sBAEkEC,UAAUH,IAF5E,SAGUI,MAAMF,GAHhB,cAGRG,EAHQ,gBAISA,EAAUC,OAJnB,uBAINC,EAJM,EAINA,KAJM,kBAMPA,EAAKC,KAAI,SAACC,GAAD,MACd,CACEC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,SAVvB,4CAAH,sDCmBEY,EAhBM,SAACC,GAAc,IAAD,EACP/B,mBAAS,CACjC4B,OAAQ,GACRI,SAAS,IAHsB,mBAC1BC,EAD0B,KACnBC,EADmB,KAajC,OAPAC,qBAAU,WACRpB,EAAQgB,GAAUK,MAAK,SAACC,GAAD,OAAUH,EAAS,CACxCN,OAAQS,EACRL,SAAS,SAEV,CAACD,IAEGE,GCCMK,EAdK,SAAC,GAAD,IAAGX,EAAH,EAAGA,MAAOT,EAAV,EAAUA,IAAV,OAClB,yBAAKqB,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKtB,EAAKuB,IAAKd,KAEtB,2BAAIA,KCqBOe,EAxBC,SAAC,GAAkB,IAAhBX,EAAe,EAAfA,SAAe,EACJD,EAAaC,GAAjCH,EADwB,EACxBA,OAAQI,EADgB,EAChBA,QAChB,OACE,oCACE,wBAAIO,UAAU,SAASR,GACvB,yBAAKQ,UAAU,+CACZP,GAAW,0CAEVJ,EAAOJ,KAAI,SAACmB,GAAD,OACT,kBAAC,EAAD,eACEC,IAAKD,EAAMjB,IACPiB,UCYHE,EAxBM,WAAO,IAAD,EACW7C,mBAAS,CAC3C,kBACA,YACA,0BAJuB,mBAClBQ,EADkB,KACNV,EADM,KAOzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEEU,EAAWgB,KAAI,SAACO,GAAD,OACb,kBAAC,EAAD,CACEa,IAAKb,EACLA,SAAUA,S,MCdtBe,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.59f05aeb.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories, placeholderText }) => {\n  // Hooks\n  const [inputValue, setinputValue] = useState('');\n\n  // validations\n  const handleInputChange = (e) => setinputValue(e.target.value);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setinputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder={placeholderText}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n  placeholderText: PropTypes.string,\n};\n\nAddCategory.defaultProps = {\n  placeholderText: 'Busca tus gifs',\n};\n\nexport default AddCategory;\n","const getGifs = async (search) => {\n  const apiKey = 'p3sfQopuPVQGPu7z0smMECu1PCRrYjE2';\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&limit=9&q=${encodeURI(search)}`;\n  const respuesta = await fetch(url);\n  const { data } = await respuesta.json();\n\n  return data.map((img) => (\n    {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    }\n  ));\n};\n\nexport default getGifs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    images: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => setstate({\n      images: imgs,\n      loading: false,\n    }));\n  }, [category]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({ title, url }) => (\n  <div className=\"card\">\n    <div className=\"image-card\">\n      <img src={url} alt={title} />\n    </div>\n    <p>{title}</p>\n  </div>\n);\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFetchGifs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { images, loading } = useFetchGifs(category);\n  return (\n    <>\n      <h3 className=\"mt-40\">{category}</h3>\n      <div className=\"card-grid animate__animated animate__zoomIn\">\n        {loading && <p>Cargando...</p>}\n        {\n          images.map((image) => (\n            <GifGridItem\n              key={image.id}\n              {...image}\n            />\n          ))\n        }\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\n    'Hunter X Hunter',\n    'One Piece',\n    'boku no hero academia',\n  ]);\n\n  return (\n    <>\n      <h2> GifExpert! </h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {\n        categories.map((category) => (\n          <GifGrid\n            key={category}\n            category={category}\n          />\n        ))\n      }\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}