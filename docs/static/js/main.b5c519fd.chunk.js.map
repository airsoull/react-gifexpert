{"version":3,"sources":["components/AddCategory.jsx","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.jsx","components/GifGrid.jsx","GifExpertApp.jsx","index.js"],"names":["AddCategory","setCategories","placeholderText","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","defaultProps","getGIFs","search","a","limit","url","encodeURI","fetch","response","json","data","map","img","id","title","images","downsized_medium","useFetchGifs","category","loading","state","setState","useEffect","getGifs","then","imgs","GifGridItem","className","src","alt","GifGrid","useFetchGIFs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"qMAGMA,EAAc,SAAC,GAAwC,IAAtCC,EAAqC,EAArCA,cAAeC,EAAsB,EAAtBA,gBAAsB,EAEtBC,mBAAS,IAFa,mBAEnDC,EAFmD,KAEvCC,EAFuC,KAc1D,OACE,0BAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BT,GAAc,SAACU,GAAD,OAAiBP,GAAjB,mBAAgCO,OAC9CN,EAAc,OAMd,2BACEO,KAAK,OACLC,MAAOT,EACPU,SAdoB,SAACP,GAAD,OAAOF,EAAcE,EAAEQ,OAAOF,QAelDG,YAAad,MAWrBF,EAAYiB,aAAe,CACzBf,gBAAiB,wBAGJF,Q,uBCvBAkB,EAfF,uCAAG,WAAOC,GAAP,mCAAAC,EAAA,6DAAeC,EAAf,+BAAuB,EAE/BC,EAFQ,uDACC,mCADD,kBAE8DD,EAF9D,cAEyEE,UAAUJ,IAFnF,SAGSK,MAAMF,GAHf,cAGRG,EAHQ,gBAISA,EAASC,OAJlB,uBAINC,EAJM,EAINA,KAJM,kBAMPA,EAAKC,KAAI,SAACC,GAAD,MACd,CACEC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,SAVvB,4CAAH,sDCmBEY,EAhBM,SAACC,GAAyB,IAAfd,EAAc,uDAAN,EAAM,EAClBlB,mBAAS,CACjC6B,OAAQ,GACRI,SAAS,IAHiC,mBACrCC,EADqC,KAC9BC,EAD8B,KAa5C,OAPAC,qBAAU,WACRC,EAAQL,EAAUd,GAAOoB,MAAK,SAACC,GAAD,OAAUJ,EAAS,CAC/CN,OAAQU,EACRN,SAAS,SAEV,CAACD,EAAUd,IAEPgB,GCCMM,EAdK,SAAC,GAAD,IAAGZ,EAAH,EAAGA,MAAOT,EAAV,EAAUA,IAAV,OAClB,yBAAKsB,UAAU,QACb,yBAAKA,UAAU,cACb,yBAAKC,IAAKvB,EAAKwB,IAAKf,KAEtB,2BAAIA,KCsBOgB,EAzBC,SAAC,GAAkB,IAAhBZ,EAAe,EAAfA,SAAe,EACJa,EAAab,GAAjCH,EADwB,EACxBA,OAAQI,EADgB,EAChBA,QAChB,OACE,oCACE,wBAAIQ,UAAU,SAAST,GACvB,yBAAKS,UAAU,+CACZR,GAAW,yCAEVJ,EAAOJ,KAAI,gBAAGE,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOT,EAAd,EAAcA,IAAd,OACT,kBAAC,EAAD,CACE2B,IAAKnB,EACLC,MAAOA,EACPT,IAAKA,UCWJ4B,EAxBM,WAAO,IAAD,EACW/C,mBAAS,CAC3C,kBACA,YACA,0BAJuB,mBAClBQ,EADkB,KACNV,EADM,KAOzB,OACE,oCACE,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEEU,EAAWiB,KAAI,SAACO,GAAD,OACb,kBAAC,EAAD,CACEc,IAAKd,EACLA,SAAUA,S,MCdtBgB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.b5c519fd.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategory = ({ setCategories, placeholderText }) => {\n  // Hooks\n  const [inputValue, setInputValue] = useState('');\n\n  // validations\n  const handleInputChange = (e) => setInputValue(e.target.value);\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories((categories) => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleInputChange}\n        placeholder={placeholderText}\n      />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n  placeholderText: PropTypes.string,\n};\n\nAddCategory.defaultProps = {\n  placeholderText: 'Search yours GIFs...',\n};\n\nexport default AddCategory;\n","const getGIFs = async (search, limit = 9) => {\n  const apiKey = 'p3sfQopuPVQGPu7z0smMECu1PCRrYjE2';\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=${apiKey}&limit=${limit}&q=${encodeURI(search)}`;\n  const response = await fetch(url);\n  const { data } = await response.json();\n\n  return data.map((img) => (\n    {\n      id: img.id,\n      title: img.title,\n      url: img.images.downsized_medium.url,\n    }\n  ));\n};\n\nexport default getGIFs;\n","import { useState, useEffect } from 'react';\nimport getGifs from '../helpers/getGifs';\n\nconst useFetchGifs = (category, limit = 9) => {\n  const [state, setState] = useState({\n    images: [],\n    loading: true,\n  });\n\n  useEffect(() => {\n    getGifs(category, limit).then((imgs) => setState({\n      images: imgs,\n      loading: false,\n    }));\n  }, [category, limit]);\n\n  return state;\n};\n\nexport default useFetchGifs;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst GifGridItem = ({ title, url }) => (\n  <div className=\"card\">\n    <div className=\"image-card\">\n      <img src={url} alt={title} />\n    </div>\n    <p>{title}</p>\n  </div>\n);\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport useFetchGIFs from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({ category }) => {\n  const { images, loading } = useFetchGIFs(category);\n  return (\n    <>\n      <h3 className=\"mt-40\">{category}</h3>\n      <div className=\"card-grid animate__animated animate__zoomIn\">\n        {loading && <p>Loading...</p>}\n        {\n          images.map(({ id, title, url }) => (\n            <GifGridItem\n              key={id}\n              title={title}\n              url={url}\n            />\n          ))\n        }\n      </div>\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import React, { useState } from 'react';\nimport AddCategory from './components/AddCategory';\nimport GifGrid from './components/GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([\n    'Hunter X Hunter',\n    'One Piece',\n    'Boku no hero academia',\n  ]);\n\n  return (\n    <>\n      <h2> GifExpert! </h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {\n        categories.map((category) => (\n          <GifGrid\n            key={category}\n            category={category}\n          />\n        ))\n      }\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\n\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}